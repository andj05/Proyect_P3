@model Proyect_P3.Models.ViewModels.AddTipdocViewModels
@{
    ViewBag.Title = "Agregar Tipo de Documento";
    Layout = "~/views/shared/_LayoutApp.cshtml";
}

<style>
    .page-container {
        background: #f8f9fa;
        min-height: 100vh;
        padding: 0;
        margin: 0;
    }

    .header-card {
        background: white;
        border-radius: 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 0;
    }

    .page-title {
        color: #2c3e50;
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        border-bottom: 3px solid #27ae60;
        padding-bottom: 0.5rem;
        display: inline-block;
    }

    .form-container {
        background: white;
        padding: 2rem;
        margin: 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .form-section {
        margin-bottom: 2rem;
    }

    .section-title {
        color: #2c3e50;
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #ecf0f1;
        display: flex;
        align-items: center;
    }

    .section-icon {
        font-size: 1.5rem;
        margin-right: 0.8rem;
        color: #3498db;
    }

    .form-group-modern {
        margin-bottom: 1.5rem;
    }

    .form-label-modern {
        display: block;
        margin-bottom: 0.5rem;
        color: #2c3e50;
        font-weight: 600;
        font-size: 1rem;
    }

    .required-field::after {
        content: " *";
        color: #e74c3c;
        font-weight: bold;
    }

    .form-control-modern {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
        color: #2c3e50;
    }

    .form-control-modern:focus {
        outline: none;
        border-color: #3498db;
        background: white;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .form-control-modern.is-invalid {
        border-color: #e74c3c;
        background: #fdf2f2;
    }

    .form-control-modern.is-invalid:focus {
        border-color: #e74c3c;
        box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);
    }

    .select-modern {
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 12px center;
        background-repeat: no-repeat;
        background-size: 16px;
        padding-right: 48px;
    }

    .textarea-modern {
        resize: vertical;
        min-height: 100px;
    }

    .validation-error {
        color: #e74c3c;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: block;
        font-weight: 500;
    }

    .btn-modern {
        border-radius: 8px;
        font-weight: 500;
        padding: 12px 24px;
        transition: all 0.3s ease;
        border: none;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        font-size: 1rem;
        display: inline-block;
        cursor: pointer;
        text-decoration: none;
    }

    .btn-success-modern {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        box-shadow: 0 2px 8px rgba(39, 174, 96, 0.3);
    }

    .btn-success-modern:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(39, 174, 96, 0.4);
        color: white;
    }

    .btn-secondary-modern {
        background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        color: white;
        box-shadow: 0 2px 8px rgba(149, 165, 166, 0.3);
    }

    .btn-secondary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(149, 165, 166, 0.4);
        color: white;
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

    .btn-primary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.4);
        color: white;
    }

    .btn-modern:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }

    .actions-container {
        background: #f8f9fa;
        padding: 2rem;
        margin: 0;
        border-top: 1px solid #e9ecef;
        text-align: center;
    }

    .form-row {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-col {
        flex: 1;
    }

    .info-card {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        padding: 1.2rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
    }

    .info-card h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .info-card p {
        margin: 0;
        font-size: 0.95rem;
        opacity: 0.9;
    }

    .counter-input {
        text-align: right;
    }


        .header-card, .form-container, .actions-container {
            padding: 1rem;
        }

        .page-title {
            font-size: 1.5rem;
        }

        .btn-modern {
            width: 100%;
            margin-right: 0;
        }
    }
</style>

<div class="page-container">
    <!-- Header -->
    <div class="header-card">
        <h2 class="page-title">✨ Agregar Nuevo Tipo de Documento</h2>

        <div class="info-card">
            <h4>💡 Información Importante</h4>
            <p>Complete todos los campos marcados con (*) para crear un nuevo tipo de documento en el sistema.</p>
        </div>
    </div>

    <!-- Formulario -->
    @using (Html.BeginForm("Add", "Tipdoc", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate" }))
    {
        <div class="form-container">
            <!-- Información Básica -->
            <div class="form-section">
                <h3 class="section-title">
                    <span class="section-icon">📋</span>
                    Información Básica
                </h3>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern required-field">Tipo de Documento</label>
                            @Html.TextBoxFor(m => m.TipoDoc, new
                            {
                                @class = "form-control-modern",
                                @placeholder = "Ej: FAC, REC",
                                @maxlength = "3"
                            })
                            @Html.ValidationMessageFor(m => m.TipoDoc, "", new { @class = "validation-error" })
                        </div>
                    </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern required-field">Origen</label>
                            @Html.TextBoxFor(m => m.Origen, new
                            {
                                @class = "form-control-modern",
                                @placeholder = "Ej: S, U, E",
                                @maxlength = "1"
                            })
                            @Html.ValidationMessageFor(m => m.Origen, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                <div class="form-group-modern">
                    <label class="form-label-modern required-field">Descripción</label>
                    @Html.TextAreaFor(m => m.Descripcion, new
                    {
                        @class = "form-control-modern textarea-modern",
                        @placeholder = "Descripción detallada del tipo de documento...",
                        @maxlength = "50"
                    })
                    @Html.ValidationMessageFor(m => m.Descripcion, "", new { @class = "validation-error" })
                </div>
            </div>

            <!-- Configuración Contable -->
            <div class="form-section">
                <h3 class="section-title">
                    <span class="section-icon">💰</span>
                    Configuración Contable
                </h3>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern">Cuenta Débito</label>
                            @Html.TextBoxFor(m => m.CuentaDebito, new
                            {
                                @class = "form-control-modern",
                                @placeholder = "Código de cuenta débito",
                                @maxlength = "20"
                            })
                            @Html.ValidationMessageFor(m => m.CuentaDebito, "", new { @class = "validation-error" })
                        </div>
                    </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern">Cuenta Crédito</label>
                            @Html.TextBoxFor(m => m.CuentaCredito, new
                            {
                                @class = "form-control-modern",
                                @placeholder = "Código de cuenta crédito",
                                @maxlength = "20"
                            })
                            @Html.ValidationMessageFor(m => m.CuentaCredito, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern">Contador</label>
                            @Html.TextBoxFor(m => m.Contador, new
                            {
                                @class = "form-control-modern",
                                @placeholder = "Ej: 12345",
                                @maxlength = "10"
                            })
                            @Html.ValidationMessageFor(m => m.Contador, "", new { @class = "validation-error" })
                        </div>
                    </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern">Estatus</label>
                            @Html.DropDownListFor(m => m.Estatus, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Activo", Value = "1" },
                                new SelectListItem { Text = "Inactivo", Value = "2" },
                                new SelectListItem { Text = "Borrado", Value = "3" }
                            }, new
                            {
                                @class = "form-control-modern select-modern"
                            })
                            @Html.ValidationMessageFor(m => m.Estatus, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Botones de Acción -->
        <div class="actions-container">
            <button type="submit" class="btn btn-modern btn-success-modern" id="submitBtn">
                💾 Guardar Tipo de Documento
            </button>
            <input type="button"
                   value="📋 Ver Lista"
                   class="btn btn-modern btn-primary-modern"
                   onclick="document.location.href='@Url.Content("~/Tipdoc/TipdocQuery")'" />
            <input type="button"
                   value="↩️ Volver Atrás"
                   class="btn btn-modern btn-secondary-modern"
                   onclick="window.history.back()" />
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Validación en tiempo real
        const form = document.querySelector('form');
        const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');

        inputs.forEach(input => {
            input.addEventListener('blur', validateField);
            input.addEventListener('input', clearValidation);
        });

        // Validación del formulario al enviar
        form.addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
                showNotification('Por favor, complete todos los campos requeridos correctamente.', 'error');
                return false;
            }

            // Mostrar indicador de carga
            showLoading(true);
            document.getElementById('submitBtn').disabled = true;
        });
    });

    function validateField(e) {
        const field = e.target;
        const value = field.value.trim();

        if (field.hasAttribute('required') && !value) {
            field.classList.add('is-invalid');
            showFieldError(field, 'Este campo es requerido.');
            return false;
        }

        // Validaciones específicas
        if (field.name === 'TipoDoc' && value.length < 2) {
            field.classList.add('is-invalid');
            showFieldError(field, 'El tipo de documento debe tener al menos 2 caracteres.');
            return false;
        }

        if (field.name === 'Descripcion' && value.length < 10) {
            field.classList.add('is-invalid');
            showFieldError(field, 'La descripción debe tener al menos 10 caracteres.');
            return false;
        }

        if (field.type === 'number' && value && parseInt(value) < 0) {
            field.classList.add('is-invalid');
            showFieldError(field, 'El valor debe ser mayor o igual a 0.');
            return false;
        }

        field.classList.remove('is-invalid');
        hideFieldError(field);
        return true;
    }

    function clearValidation(e) {
        const field = e.target;
        if (field.classList.contains('is-invalid')) {
            field.classList.remove('is-invalid');
            hideFieldError(field);
        }
    }

    function validateForm() {
        const form = document.querySelector('form');
        const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
        let isValid = true;

        inputs.forEach(input => {
            if (!validateField({target: input})) {
                isValid = false;
            }
        });

        return isValid;
    }

    function showFieldError(field, message) {
        hideFieldError(field);
        const errorDiv = document.createElement('span');
        errorDiv.className = 'validation-error field-error';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }

    function hideFieldError(field) {
        const existingError = field.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
    }

    function showLoading(show) {
        if (show) {
            if (!document.getElementById('loadingOverlay')) {
                const overlay = document.createElement('div');
                overlay.id = 'loadingOverlay';
                overlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                `;
                overlay.innerHTML = `
                    <div style="background: white; padding: 2.5rem; border-radius: 8px; text-align: center;">
                        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                            <span class="sr-only">Guardando...</span>
                        </div>
                        <p style="margin-top: 1.5rem; color: #2c3e50; font-size: 1.2rem;">Guardando tipo de documento...</p>
                    </div>
                `;
                document.body.appendChild(overlay);
            }
            document.getElementById('loadingOverlay').style.display = 'flex';
        } else {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.style.display = 'none';
            }
        }
    }

    function showNotification(message, type) {
        const bgColor = type === 'success' ? '#27ae60' : '#e74c3c';
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${bgColor};
            color: white;
            padding: 1.2rem 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            font-weight: 500;
            font-size: 1.1rem;
            max-width: 400px;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(function() {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 4000);
    }

    // Auto-formatear campos
    document.addEventListener('DOMContentLoaded', function() {
        // Convertir tipo de documento a mayúsculas
        const tipoDocInput = document.querySelector('input[name="TipoDoc"]');
        if (tipoDocInput) {
            tipoDocInput.addEventListener('input', function() {
                this.value = this.value.toUpperCase();
            });
        }

        // Limitar contador a números enteros positivos
        const contadorInput = document.querySelector('input[name="Contador"]');
        if (contadorInput) {
            contadorInput.addEventListener('input', function() {
                if (this.value < 0) this.value = 0;
            });
        }
    });
</script>