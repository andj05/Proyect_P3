@model Proyect_P3.Models.ViewModels.AddTipdocViewModels
@{
    ViewBag.Title = "Agregar Nuevo Tipo de Documento";
    Layout = "~/views/shared/_LayoutApp.cshtml";
}

<style>
    /* Variables CSS para una gestión más fácil de colores y espaciados */
    :root {
        --primary-color: #3498db; /* Azul vibrante */
        --success-color: #2ecc71; /* Verde esmeralda */
        --secondary-color: #95a5a6; /* Gris neutro */
        --danger-color: #e74c3c; /* Rojo intenso */
        --text-dark: #2c3e50; /* Texto oscuro */
        --text-light: #f8f9fa; /* Fondo claro */
        --border-light: #e9ecef;
        --box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        --border-radius-base: 10px;
        --spacing-unit: 1.5rem; /* Unidad base para márgenes y paddings */
    }

    body {
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        color: var(--text-dark);
        background-color: var(--text-light);
    }

    .page-container {
        max-width: 900px;
        margin: 2rem auto;
        background: white;
        border-radius: var(--border-radius-base);
        box-shadow: var(--box-shadow);
        overflow: hidden; /* Para asegurar que los bordes internos se vean bien */
    }

    .header-section {
        background: linear-gradient(to right, var(--primary-color), #2980b9);
        color: white;
        padding: var(--spacing-unit) calc(var(--spacing-unit) * 1.5);
        text-align: center;
        border-top-left-radius: var(--border-radius-base);
        border-top-right-radius: var(--border-radius-base);
    }

    .page-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .page-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin-top: 0;
    }

    .form-main-content {
        padding: calc(var(--spacing-unit) * 1.5);
    }

    .form-section {
        background: white;
        padding: calc(var(--spacing-unit) * 1);
        border: 1px solid var(--border-light);
        border-radius: var(--border-radius-base);
        margin-bottom: var(--spacing-unit);
    }

    .section-header {
        display: flex;
        align-items: center;
        padding-bottom: 0.75rem;
        margin-bottom: 1.25rem;
        border-bottom: 2px solid #ecf0f1;
    }

    .section-icon {
        font-size: 1.75rem;
        margin-right: 0.8rem;
        color: var(--primary-color);
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-dark);
        margin: 0;
    }

    .form-group-modern {
        margin-bottom: 1.5rem;
    }

    .form-label-modern {
        display: block;
        margin-bottom: 0.6rem;
        color: var(--text-dark);
        font-weight: 600;
        font-size: 0.95rem;
    }

    .required-field::after {
        content: " *";
        color: var(--danger-color);
        font-weight: bold;
        margin-left: 3px;
    }

    .form-control-modern {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid var(--border-light);
        border-radius: 8px;
        font-size: 1rem;
        color: var(--text-dark);
        background-color: #fcfdff;
        transition: all 0.3s ease;
    }

        .form-control-modern:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.15);
            background-color: white;
        }

        .form-control-modern::placeholder {
            color: #b0bec5;
        }

        .form-control-modern.is-invalid {
            border-color: var(--danger-color);
            background-color: #fffafa;
        }

            .form-control-modern.is-invalid:focus {
                box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.15);
            }

    .select-modern {
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 12px center;
        background-repeat: no-repeat;
        background-size: 16px;
        padding-right: 40px; /* Espacio para el icono de flecha */
    }

    .textarea-modern {
        resize: vertical;
        min-height: 90px;
    }

    .validation-error {
        color: var(--danger-color);
        font-size: 0.85rem;
        margin-top: 0.6rem;
        display: block;
        font-weight: 500;
    }

    .form-row {
        display: flex;
        gap: 1.5rem;
    }

    .form-col {
        flex: 1;
        min-width: 0; /* Permite que el contenido se encoja si es necesario */
    }

    .actions-container {
        padding: var(--spacing-unit) calc(var(--spacing-unit) * 1.5);
        background: var(--text-light);
        border-top: 1px solid var(--border-light);
        display: flex;
        justify-content: flex-end; /* Alinear botones a la derecha */
        gap: 0.75rem;
        border-bottom-left-radius: var(--border-radius-base);
        border-bottom-right-radius: var(--border-radius-base);
    }

    .btn-modern {
        border-radius: 8px;
        font-weight: 600;
        padding: 12px 25px;
        transition: all 0.3s ease;
        border: none;
        font-size: 0.95rem;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-success-modern {
        background: linear-gradient(135deg, var(--success-color), #27ae60);
        color: white;
        box-shadow: 0 4px 10px rgba(46, 204, 113, 0.25);
    }

        .btn-success-modern:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(46, 204, 113, 0.35);
        }

    .btn-secondary-modern {
        background: linear-gradient(135deg, var(--secondary-color), #7f8c8d);
        color: white;
        box-shadow: 0 4px 10px rgba(149, 165, 166, 0.25);
    }

        .btn-secondary-modern:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(149, 165, 166, 0.35);
        }

    .btn-primary-modern {
        background: linear-gradient(135deg, var(--primary-color), #2980b9);
        color: white;
        box-shadow: 0 4px 10px rgba(52, 152, 219, 0.25);
    }

        .btn-primary-modern:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(52, 152, 219, 0.35);
        }

    .btn-modern:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
        box-shadow: none !important;
    }

    /* Estilos para el overlay de carga */
    #loadingOverlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        backdrop-filter: blur(3px);
        -webkit-backdrop-filter: blur(3px);
    }

        #loadingOverlay div {
            background: white;
            padding: 3rem;
            border-radius: var(--border-radius-base);
            text-align: center;
            box-shadow: var(--box-shadow);
        }

    .spinner-border {
        display: inline-block;
        width: 4rem;
        height: 4rem;
        vertical-align: -0.125em;
        border: 0.3em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        -webkit-animation: .75s linear infinite spinner-border;
        animation: .75s linear infinite spinner-border;
        color: var(--success-color); /* Color del spinner */
    }

    @@-webkit-keyframes spinner-border {
        to {
            -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }

    @@keyframes spinner-border {
        to {
            -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }

    .loading-text {
        margin-top: 1.5rem;
        color: var(--text-dark);
        font-size: 1.25rem;
        font-weight: 500;
    }

    /* Estilos para notificaciones toast */
    .toast-notification {
        position: fixed;
        top: 25px;
        right: 25px;
        background: var(--success-color);
        color: white;
        padding: 1.2rem 2rem;
        border-radius: 8px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        font-weight: 500;
        font-size: 1.05rem;
        max-width: 350px;
        animation: slideIn 0.5s forwards, fadeOut 0.5s 3.5s forwards;
    }

        .toast-notification.error {
            background: var(--danger-color);
        }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
        }

        to {
            opacity: 0;
            display: none;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .page-container {
            margin: 1rem auto;
            border-radius: 0;
            box-shadow: none;
        }

        .header-section, .form-main-content, .actions-container {
            padding: 1rem;
        }

        .page-title {
            font-size: 1.8rem;
        }

        .form-row {
            flex-direction: column;
            gap: 1rem;
        }

        .actions-container {
            flex-direction: column;
            align-items: stretch;
        }

        .btn-modern {
            width: 100%;
        }
    }
</style>

<div class="page-container">
    <div class="header-section">
        <h2 class="page-title">
            <span class="material-icons">description</span> Agregar Nuevo Tipo de Documento
        </h2>
        <p class="page-subtitle">Complete los detalles a continuación para registrar un nuevo tipo de documento en el sistema.</p>
    </div>

    @using (Html.BeginForm("Add", "Tipdoc", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate" }))
    {
        <div class="form-main-content">
            <div class="form-section">
                <div class="section-header">
                    <span class="section-icon material-icons">info</span>
                    <h3 class="section-title">Información Básica</h3>
                </div>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern required-field" for="TipoDoc">Código de Documento</label>
                            @Html.DropDownListFor(m => m.TipoDoc, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Factura (FAC)", Value = "FAC" },
                                new SelectListItem { Text = "Recibo (REC)", Value = "REC" },
                                new SelectListItem { Text = "Nota de Crédito (NC)", Value = "N_C" },
                                new SelectListItem { Text = "Orden de Compra (OC)", Value = "O_C" }
                            }, "Seleccione un tipo", new
                            {
                                @class = "form-control-modern select-modern",
                                @id = "TipoDoc",
                                @required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.TipoDoc, "", new { @class = "validation-error" })
                        </div>
                    </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern required-field" for="Origen">Origen del Documento</label>
                            @Html.DropDownListFor(m => m.Origen, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Sistema (Generado Automáticamente)", Value = "S" },
                                new SelectListItem { Text = "Usuario (Ingresado Manualmente)", Value = "U" },
                                new SelectListItem { Text = "Externo (Importado)", Value = "E" }
                            }, "Seleccione el origen", new
                            {
                                @class = "form-control-modern select-modern",
                                @id = "Origen",
                                @required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.Origen, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                <div class="form-group-modern">
                    <label class="form-label-modern required-field" for="Descripcion">Descripción Detallada</label>
                    @Html.TextAreaFor(m => m.Descripcion, new
                    {
                        @class = "form-control-modern textarea-modern",
                        @id = "Descripcion",
                        @placeholder = "Escriba una descripción clara y concisa para el tipo de documento (máx. 50 caracteres)...",
                        @maxlength = "50",
                        @required = "required",
                        @rows = "3"
                    })
                    @Html.ValidationMessageFor(m => m.Descripcion, "", new { @class = "validation-error" })
                </div>
            </div>

            <div class="form-section">
                <div class="section-header">
                    <span class="section-icon material-icons">account_balance</span>
                    <h3 class="section-title">Configuración Contable y Estatus</h3>
                </div>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern" for="CuentaDebito">Cuenta Débito</label>
                            @Html.TextBoxFor(m => m.CuentaDebito, new
                            {
                                @class = "form-control-modern",
                                @id = "CuentaDebito",
                                @placeholder = "Ej: 11010100 (opcional)",
                                @maxlength = "20"
                            })
                            @Html.ValidationMessageFor(m => m.CuentaDebito, "", new { @class = "validation-error" })
                        </div>
                    </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern" for="CuentaCredito">Cuenta Crédito</label>
                            @Html.TextBoxFor(m => m.CuentaCredito, new
                            {
                                @class = "form-control-modern",
                                @id = "CuentaCredito",
                                @placeholder = "Ej: 21010100 (opcional)",
                                @maxlength = "20"
                            })
                            @Html.ValidationMessageFor(m => m.CuentaCredito, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                    <div class="form-col">
                        <div class="form-group-modern">
                            <label class="form-label-modern required-field" for="Estatus">Estatus</label>
                            @Html.DropDownListFor(m => m.Estatus, new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Activo", Value = "1" },
                                new SelectListItem { Text = "Inactivo", Value = "2" },
                                new SelectListItem { Text = "Borrado (No Usar)", Value = "3" }
                            }, "Seleccione el estatus", new
                            {
                                @class = "form-control-modern select-modern",
                                @id = "Estatus",
                                @required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.Estatus, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>
            </div>

        <div class="actions-container">
            <button type="submit" class="btn-modern btn-success-modern" id="submitBtn">
                <span class="material-icons">save</span> Guardar Tipo de Documento
            </button>
            <a href="@Url.Action("TipdocQuery", "Tipdoc")" class="btn-modern btn-primary-modern">
                <span class="material-icons">list_alt</span> Ver Lista
            </a>
            <button type="button" class="btn-modern btn-secondary-modern" onclick="window.history.back()">
                <span class="material-icons">arrow_back</span> Volver Atrás
            </button>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Función para agregar iconos de Material Design si no están ya enlazados en el _Layout
        function loadMaterialIcons() {
            if (!document.querySelector('link[href*="material-icons"]')) {
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';
                document.head.appendChild(link);
            }
        }
        loadMaterialIcons();

        const form = document.querySelector('form');
        const submitBtn = document.getElementById('submitBtn');

        // Seleccionar todos los campos que tienen la clase 'required-field'
        const requiredFields = form.querySelectorAll('.required-field + .form-control-modern');

        // Agrega listeners a los campos requeridos para validación en tiempo real
        requiredFields.forEach(field => {
            field.addEventListener('input', function () {
                validateField(field);
                checkFormValidity();
            });
            field.addEventListener('blur', function () {
                validateField(field);
                checkFormValidity();
            });
        });

        // Habilita/Deshabilita el botón de submit inicialmente y en cada cambio
        checkFormValidity();

        // Manejo del envío del formulario
        form.addEventListener('submit', function (e) {
            // Re-validar todos los campos al enviar para asegurar
            let formIsValid = true;
            requiredFields.forEach(field => {
                if (!validateField(field)) {
                    formIsValid = false;
                }
            });

            if (!formIsValid) {
                e.preventDefault(); // Detiene el envío si hay errores
                showNotification('Por favor, complete todos los campos obligatorios.', 'error');
                submitBtn.disabled = false; // Asegura que el botón se habilite si falla la validación
            } else {
                showLoading(true); // Muestra el overlay de carga
                submitBtn.disabled = true; // Deshabilita el botón al enviar
            }
        });

        function validateField(field) {
            const value = field.value.trim();
            const validationMessageElement = field.parentNode.querySelector('.validation-error');
            let isValid = true;
            let errorMessage = '';

            // Limpiar errores previos
            field.classList.remove('is-invalid');
            if (validationMessageElement) {
                validationMessageElement.textContent = '';
            }

            if (field.hasAttribute('required') && !value) {
                isValid = false;
                errorMessage = 'Este campo es obligatorio.';
            } else if (field.id === 'TipoDoc' && value.length < 3) {
                isValid = false;
                errorMessage = 'El código de documento debe tener 3 caracteres.';
            } else if (field.id === 'Descripcion' && (value.length < 5 || value.length > 50)) {
                isValid = false;
                errorMessage = 'La descripción debe tener entre 5 y 50 caracteres.';
            }

            if (!isValid) {
                field.classList.add('is-invalid');
                if (validationMessageElement) {
                    validationMessageElement.textContent = errorMessage;
                } else { // Crear el elemento de error si no existe
                    const newErrorDiv = document.createElement('span');
                    newErrorDiv.className = 'validation-error';
                    newErrorDiv.textContent = errorMessage;
                    field.parentNode.appendChild(newErrorDiv);
                }
            }
            return isValid;
        }

        // Función para verificar la validez del formulario y habilitar/deshabilitar el botón
        function checkFormValidity() {
            let allFieldsValid = true;
            requiredFields.forEach(field => {
                // Solo verifica si el campo está vacío, no si es inválido por otras reglas
                if (field.hasAttribute('required') && field.value.trim() === '') {
                    allFieldsValid = false;
                }
            });
            submitBtn.disabled = !allFieldsValid; // Deshabilita si no todos los campos requeridos están llenos
        }


        // Función para mostrar/ocultar el overlay de carga
        function showLoading(show) {
            let overlay = document.getElementById('loadingOverlay');
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.id = 'loadingOverlay';
                overlay.innerHTML = `
                    <div>
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Cargando...</span>
                        </div>
                        <p class="loading-text">Guardando tipo de documento...</p>
                    </div>
                `;
                document.body.appendChild(overlay);
            }
            overlay.style.display = show ? 'flex' : 'none';
        }

        // Función para mostrar notificaciones tipo "toast"
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `toast-notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 4000); // La notificación desaparecerá después de 4 segundos
        }
    });
</script>